Relationships:
Users ðŸ¡’ Orders (1:M)

Users ðŸ¡’ Reviews (1:M)

Orders ðŸ¡’ Order_Items (1:M)

Order_Items ðŸ¡’ Products (M:1)

Products ðŸ¡’ Categories (M:1)

Orders ðŸ¡’ Payments (1:1)


Simple Order mechanism

@Service
@RequiredArgsConstructor
public class OrderService {
    private final OrderRepository orderRepository;
    private final ProductRepository productRepository;
    private final UserRepository userRepository;

    @Transactional
    public OrderResponseDTO createOrder(OrderRequestDTO request) {
        User user = userRepository.findById(request.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found"));

        List<OrderItem> orderItems = new ArrayList<>();
        double totalPrice = 0.0;

        for (OrderItemRequestDTO item : request.getItems()) {
            Product product = productRepository.findById(item.getProductId())
                    .orElseThrow(() -> new RuntimeException("Product not found"));

            if (product.getStockQuantity() < item.getQuantity()) {
                throw new RuntimeException("Insufficient stock for product: " + product.getName());
            }

            // Deduct stock
            product.setStockQuantity(product.getStockQuantity() - item.getQuantity());

            OrderItem orderItem = OrderItem.builder()
                    .product(product)
                    .quantity(item.getQuantity())
                    .price(product.getPrice() * item.getQuantity())
                    .build();

            orderItems.add(orderItem);
            totalPrice += orderItem.getPrice();
        }

        Order order = Order.builder()
                .user(user)
                .orderDate(LocalDateTime.now())
                .status(OrderStatus.PENDING)
                .orderItems(orderItems)
                .totalPrice(totalPrice)
                .build();

        // Save order and update product stock
        orderItems.forEach(orderItem -> orderItem.setOrder(order));
        orderRepository.save(order);
        productRepository.saveAll(orderItems.stream().map(OrderItem::getProduct).toList());

        return new OrderResponseDTO(order.getId(), order.getStatus(), totalPrice);
    }
}
